#include "ContactUI.h"
#include <iostream>
#include <limits>
#include <algorithm>

using namespace std;

ContactUI::ContactUI() {
    manager = ContactManager::getInstance();
}

ContactUI::~ContactUI() {}

void ContactUI::run() {
    showWelcome();
    
    int choice;
    do {
        showMainMenu();
        choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
        
        switch (choice) {
            case 1:
                addContact();
                break;
            case 2:
                showContactMenu();
                break;
            case 3:
                searchContacts();
                break;
            case 4:
                displayAllContacts();
                break;
                    case 5:
            cout << "\nüìä T·ªïng s·ªë li√™n h·ªá: " << manager->getTotalContacts() << endl;
            break;
            case 6:
                showGoodbye();
                break;
                    default:
            cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i." << endl;
        }
        
        if (choice != 6) {
            pause();
            clearScreen();
        }
    } while (choice != 6);
}

void ContactUI::showWelcome() const {
    clearScreen();
    cout << "=========================================" << endl;
    cout << "    H·ªÜ TH·ªêNG QU·∫¢N L√ù DANH B·∫† TH√îNG MINH" << endl;
    cout << "=========================================" << endl;
    cout << "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr√¨nh qu·∫£n l√Ω danh b·∫° hi·ªáu qu·∫£!" << endl;
    cout << "ƒê∆∞·ª£c x√¢y d·ª±ng v·ªõi c√°c c·∫•u tr√∫c d·ªØ li·ªáu t·ªëi ∆∞u cho t·ªëc ƒë·ªô cao." << endl;
    cout << "=========================================\n" << endl;
}

void ContactUI::showGoodbye() const {
    cout << "\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng H·ªá th·ªëng Qu·∫£n l√Ω Danh b·∫°!" << endl;
    cout << "T·∫°m bi·ªát!\n" << endl;
}

void ContactUI::showMainMenu() const {
    cout << "\n=== MENU CH√çNH ===" << endl;
    cout << "1. Th√™m li√™n h·ªá m·ªõi" << endl;
    cout << "2. Qu·∫£n l√Ω li√™n h·ªá" << endl;
    cout << "3. T√¨m ki·∫øm li√™n h·ªá" << endl;
    cout << "4. Hi·ªÉn th·ªã t·∫•t c·∫£ li√™n h·ªá" << endl;
    cout << "5. Th·ªëng k√™" << endl;
    cout << "6. Tho√°t" << endl;
    cout << "=================" << endl;
}

void ContactUI::showContactMenu() const {
    cout << "\n=== QU·∫¢N L√ù LI√äN H·ªÜ ===" << endl;
    cout << "1. Ch·ªânh s·ª≠a li√™n h·ªá" << endl;
    cout << "2. X√≥a li√™n h·ªá" << endl;
    cout << "3. Xem chi ti·∫øt li√™n h·ªá" << endl;
    cout << "4. Th√™m s·ªë ƒëi·ªán tho·∫°i" << endl;
    cout << "5. Th√™m email" << endl;
    cout << "6. Quay l·∫°i menu ch√≠nh" << endl;
    cout << "=========================" << endl;
    
    int choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
    
    switch (choice) {
        case 1:
            editContact();
            break;
        case 2:
            deleteContact();
            break;
        case 3:
            viewContact();
            break;
        case 4:
            addPhoneToContact();
            break;
        case 5:
            addEmailToContact();
            break;
        case 6:
            return;
        default:
            cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
    }
}

void ContactUI::showSearchMenu() const {
    cout << "\n=== T√ôY CH·ªåN T√åM KI·∫æM ===" << endl;
    cout << "1. T√¨m ki·∫øm theo t√™n" << endl;
    cout << "2. T√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i" << endl;
    cout << "3. T√¨m ki·∫øm theo email" << endl;
    cout << "4. Quay l·∫°i menu ch√≠nh" << endl;
    cout << "=====================" << endl;
}

void ContactUI::addContact() const {
    cout << "\n=== TH√äM LI√äN H·ªÜ M·ªöI ===" << endl;
    
    // Nh·∫≠p t√™n v·ªõi validation
    string name;
    do {
        name = getStringInput("Nh·∫≠p t√™n li√™n h·ªá: ");
        if (name.empty()) {
            cout << "‚ùå T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng! Vui l√≤ng nh·∫≠p l·∫°i." << endl;
        } else if (name.length() < 2) {
            cout << "‚ùå T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±! Vui l√≤ng nh·∫≠p l·∫°i." << endl;
        }
    } while (name.empty() || name.length() < 2);
    
    if (manager->addContact(name)) {
        Contact* contact = manager->findContact(name);
        if (contact) {
            cout << "‚úì Li√™n h·ªá c∆° b·∫£n ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!" << endl;
            
            // Hi·ªÉn th·ªã menu th√™m th√¥ng tin chi ti·∫øt
            showAddDetailsMenu(contact);
        }
    }
}

void ContactUI::showAddDetailsMenu(Contact* contact) const {
    cout << "\n=== TH√äM TH√îNG TIN CHI TI·∫æT ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << " (ID: " << contact->getId() << ")" << endl;
    
    int choice;
    do {
        cout << "\n=== MENU TH√äM TH√îNG TIN ===" << endl;
        cout << "1. Th√™m s·ªë ƒëi·ªán tho·∫°i" << endl;
        cout << "2. Th√™m email" << endl;
        cout << "3. Th√™m ƒë·ªãa ch·ªâ" << endl;
        cout << "4. Th√™m ghi ch√∫" << endl;
        cout << "5. Xem th√¥ng tin hi·ªán t·∫°i" << endl;
        cout << "6. Ho√†n t·∫•t v√† quay l·∫°i" << endl;
        cout << "=========================" << endl;
        
        choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
        
        switch (choice) {
            case 1:
                addPhoneToContact(contact);
                break;
            case 2:
                addEmailToContact(contact);
                break;
            case 3:
                addAddressToContact(contact);
                break;
            case 4:
                addNotesToContact(contact);
                break;
            case 5:
                cout << "\n=== TH√îNG TIN HI·ªÜN T·∫†I ===" << endl;
                contact->display();
                break;
            case 6:
                cout << "\n=== TH√îNG TIN LI√äN H·ªÜ HO√ÄN CH·ªàNH ===" << endl;
                contact->display();
                cout << "‚úì Li√™n h·ªá ƒë√£ ƒë∆∞·ª£c t·∫°o ho√†n ch·ªânh!" << endl;
                return;
            default:
                cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i." << endl;
        }
        
        if (choice != 6) {
            pause();
        }
    } while (choice != 6);
}

void ContactUI::addContactDetails(Contact* contact) const {
    cout << "\n=== TH√äM TH√îNG TIN CHI TI·∫æT ===" << endl;
    
    // Th√™m s·ªë ƒëi·ªán tho·∫°i
    cout << "B·∫°n c√≥ mu·ªën th√™m s·ªë ƒëi·ªán tho·∫°i kh√¥ng? (y/n): ";
    string choice = getStringInput("");
    if (choice == "y" || choice == "Y" || choice == "yes" || choice == "YES") {
        string phone = getStringInput("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i: ");
        if (!phone.empty()) {
            contact->addPhoneNumber(phone);
            cout << "‚úì S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c th√™m!" << endl;
        }
    }
    
    // Th√™m email
    cout << "\nB·∫°n c√≥ mu·ªën th√™m email kh√¥ng? (y/n): ";
    choice = getStringInput("");
    if (choice == "y" || choice == "Y" || choice == "yes" || choice == "YES") {
        string email = getStringInput("Nh·∫≠p ƒë·ªãa ch·ªâ email: ");
        if (!email.empty()) {
            contact->addEmail(email);
            cout << "‚úì Email ƒë√£ ƒë∆∞·ª£c th√™m!" << endl;
        }
    }
    
    // Th√™m ƒë·ªãa ch·ªâ
    cout << "\nB·∫°n c√≥ mu·ªën th√™m ƒë·ªãa ch·ªâ kh√¥ng? (y/n): ";
    choice = getStringInput("");
    if (choice == "y" || choice == "Y" || choice == "yes" || choice == "YES") {
        string address = getStringInput("Nh·∫≠p ƒë·ªãa ch·ªâ: ");
        if (!address.empty()) {
            contact->setAddress(address);
            cout << "‚úì ƒê·ªãa ch·ªâ ƒë√£ ƒë∆∞·ª£c th√™m!" << endl;
        }
    }
    
    // Th√™m ghi ch√∫
    cout << "\nB·∫°n c√≥ mu·ªën th√™m ghi ch√∫ kh√¥ng? (y/n): ";
    choice = getStringInput("");
    if (choice == "y" || choice == "Y" || choice == "yes" || choice == "YES") {
        string notes = getStringInput("Nh·∫≠p ghi ch√∫: ");
        if (!notes.empty()) {
            contact->setNotes(notes);
            cout << "‚úì Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c th√™m!" << endl;
        }
    }
    
    cout << "\n=== TH√îNG TIN LI√äN H·ªÜ HO√ÄN CH·ªàNH ===" << endl;
    contact->display();
    cout << "‚úì Li√™n h·ªá ƒë√£ ƒë∆∞·ª£c t·∫°o ho√†n ch·ªânh!" << endl;
}

void ContactUI::showEditContactMenu(Contact* contact) const {
    cout << "\n=== CH·ªàNH S·ª¨A LI√äN H·ªÜ ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << " (ID: " << contact->getId() << ")" << endl;
    
    int choice;
    do {
        cout << "\n=== MENU CH·ªàNH S·ª¨A ===" << endl;
        cout << "1. Thay ƒë·ªïi t√™n" << endl;
        cout << "2. Qu·∫£n l√Ω s·ªë ƒëi·ªán tho·∫°i" << endl;
        cout << "3. Qu·∫£n l√Ω email" << endl;
        cout << "4. Thay ƒë·ªïi ƒë·ªãa ch·ªâ" << endl;
        cout << "5. Thay ƒë·ªïi ghi ch√∫" << endl;
        cout << "6. Xem th√¥ng tin hi·ªán t·∫°i" << endl;
        cout << "7. Quay l·∫°i" << endl;
        cout << "=====================" << endl;
        
        choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
        
        switch (choice) {
            case 1:
                editContactName(contact);
                break;
            case 2:
                managePhoneNumbers(contact);
                break;
            case 3:
                manageEmails(contact);
                break;
            case 4:
                addAddressToContact(contact);
                break;
            case 5:
                addNotesToContact(contact);
                break;
            case 6:
                cout << "\n=== TH√îNG TIN HI·ªÜN T·∫†I ===" << endl;
                contact->display();
                break;
            case 7:
                cout << "‚úì ƒê√£ ho√†n t·∫•t ch·ªânh s·ª≠a!" << endl;
                return;
            default:
                cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i." << endl;
        }
        
        if (choice != 7) {
            pause();
        }
    } while (choice != 7);
}

void ContactUI::editContact() const {
    cout << "\n=== CH·ªàNH S·ª¨A LI√äN H·ªÜ ===" << endl;
    string name = getStringInput("Nh·∫≠p t√™n li√™n h·ªá c·∫ßn ch·ªânh s·ª≠a: ");
    
    Contact* contact = manager->findContact(name);
    if (!contact) {
        cout << "‚ùå Kh√¥ng t√¨m th·∫•y li√™n h·ªá!" << endl;
        return;
    }
    
    showEditContactMenu(contact);
}

void ContactUI::deleteContact() const {
    cout << "\n=== X√ìA LI√äN H·ªÜ ===" << endl;
    cout << "1. X√≥a theo t√™n" << endl;
    cout << "2. X√≥a theo ID" << endl;
    
    int choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
    
    if (choice == 1) {
        string name = getStringInput("Nh·∫≠p t√™n li√™n h·ªá c·∫ßn x√≥a: ");
        manager->removeContact(name);
    } else if (choice == 2) {
        int id = getIntInput("Nh·∫≠p ID li√™n h·ªá c·∫ßn x√≥a: ");
        manager->removeContact(id);
    } else {
        cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
    }
}

void ContactUI::viewContact() const {
    cout << "\n=== XEM LI√äN H·ªÜ ===" << endl;
    cout << "1. Xem theo t√™n" << endl;
    cout << "2. Xem theo ID" << endl;
    
    int choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
    
    if (choice == 1) {
        string name = getStringInput("Nh·∫≠p t√™n li√™n h·ªá: ");
        manager->displayContact(name);
    } else if (choice == 2) {
        int id = getIntInput("Nh·∫≠p ID li√™n h·ªá: ");
        manager->displayContact(id);
    } else {
        cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
    }
}

void ContactUI::addPhoneToContact() const {
    cout << "\n=== TH√äM S·ªê ƒêI·ªÜN THO·∫†I ===" << endl;
    string name = getStringInput("Nh·∫≠p t√™n li√™n h·ªá: ");
    
    Contact* contact = manager->findContact(name);
    if (!contact) {
        cout << "‚ùå Kh√¥ng t√¨m th·∫•y li√™n h·ªá!" << endl;
        return;
    }
    
    addPhoneToContact(contact);
}

void ContactUI::addPhoneToContact(Contact* contact) const {
    cout << "\n=== TH√äM S·ªê ƒêI·ªÜN THO·∫†I ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    // Hi·ªÉn th·ªã s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i
    auto phones = contact->getPhoneNumbers();
    if (!phones.empty()) {
        cout << "S·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i: ";
        for (const auto& phone : phones) {
            cout << phone << " ";
        }
        cout << endl;
    }
    
    string phone;
    do {
        phone = getStringInput("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i m·ªõi: ");
        if (phone.empty()) {
            cout << "‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" << endl;
        } else if (!isValidPhoneNumber(phone)) {
            cout << "‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i." << endl;
        } else if (contact->hasPhoneNumber(phone)) {
            cout << "‚ùå S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ t·ªìn t·∫°i!" << endl;
        }
    } while (phone.empty() || !isValidPhoneNumber(phone) || contact->hasPhoneNumber(phone));
    
    contact->addPhoneNumber(phone);
    cout << "‚úì S·ªë ƒëi·ªán tho·∫°i '" << phone << "' ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!" << endl;
}

void ContactUI::addEmailToContact() const {
    cout << "\n=== TH√äM EMAIL ===" << endl;
    string name = getStringInput("Nh·∫≠p t√™n li√™n h·ªá: ");
    
    Contact* contact = manager->findContact(name);
    if (!contact) {
        cout << "‚ùå Kh√¥ng t√¨m th·∫•y li√™n h·ªá!" << endl;
        return;
    }
    
    addEmailToContact(contact);
}

void ContactUI::addEmailToContact(Contact* contact) const {
    cout << "\n=== TH√äM EMAIL ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    // Hi·ªÉn th·ªã email hi·ªán t·∫°i
    auto emails = contact->getEmails();
    if (!emails.empty()) {
        cout << "Email hi·ªán t·∫°i: ";
        for (const auto& email : emails) {
            cout << email << " ";
        }
        cout << endl;
    }
    
    string email;
    do {
        email = getStringInput("Nh·∫≠p ƒë·ªãa ch·ªâ email m·ªõi: ");
        if (email.empty()) {
            cout << "‚ùå Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" << endl;
        } else if (!isValidEmail(email)) {
            cout << "‚ùå Email kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i." << endl;
        } else if (contact->hasEmail(email)) {
            cout << "‚ùå Email n√†y ƒë√£ t·ªìn t·∫°i!" << endl;
        }
    } while (email.empty() || !isValidEmail(email) || contact->hasEmail(email));
    
    contact->addEmail(email);
    cout << "‚úì Email '" << email << "' ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!" << endl;
}

void ContactUI::addAddressToContact(Contact* contact) const {
    cout << "\n=== TH√äM ƒê·ªäA CH·ªà ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ hi·ªán t·∫°i
    string currentAddress = contact->getAddress();
    if (!currentAddress.empty()) {
        cout << "ƒê·ªãa ch·ªâ hi·ªán t·∫°i: " << currentAddress << endl;
    }
    
    string address;
    do {
        address = getStringInput("Nh·∫≠p ƒë·ªãa ch·ªâ m·ªõi: ");
        if (address.empty()) {
            cout << "‚ùå ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" << endl;
        } else if (address.length() < 5) {
            cout << "‚ùå ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±!" << endl;
        }
    } while (address.empty() || address.length() < 5);
    
    contact->setAddress(address);
    cout << "‚úì ƒê·ªãa ch·ªâ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" << endl;
}

void ContactUI::addNotesToContact(Contact* contact) const {
    cout << "\n=== TH√äM GHI CH√ö ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    // Hi·ªÉn th·ªã ghi ch√∫ hi·ªán t·∫°i
    string currentNotes = contact->getNotes();
    if (!currentNotes.empty()) {
        cout << "Ghi ch√∫ hi·ªán t·∫°i: " << currentNotes << endl;
    }
    
    string notes = getStringInput("Nh·∫≠p ghi ch√∫ m·ªõi: ");
    if (!notes.empty()) {
        contact->setNotes(notes);
        cout << "‚úì Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" << endl;
    } else {
        cout << "‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi g√¨." << endl;
    }
}

void ContactUI::editContactName(Contact* contact) const {
    cout << "\n=== THAY ƒê·ªîI T√äN ===" << endl;
    cout << "T√™n hi·ªán t·∫°i: " << contact->getName() << endl;
    
    string newName;
    do {
        newName = getStringInput("Nh·∫≠p t√™n m·ªõi: ");
        if (newName.empty()) {
            cout << "‚ùå T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" << endl;
        } else if (newName.length() < 2) {
            cout << "‚ùå T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!" << endl;
        } else if (newName == contact->getName()) {
            cout << "‚ÑπÔ∏è T√™n m·ªõi gi·ªëng t√™n c≈©!" << endl;
            return;
        }
    } while (newName.empty() || newName.length() < 2);
    
    contact->setName(newName);
    cout << "‚úì T√™n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi t·ª´ '" << contact->getName() << "' th√†nh '" << newName << "'!" << endl;
}

void ContactUI::managePhoneNumbers(Contact* contact) const {
    cout << "\n=== QU·∫¢N L√ù S·ªê ƒêI·ªÜN THO·∫†I ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    auto phones = contact->getPhoneNumbers();
    if (phones.empty()) {
        cout << "üì≠ Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i n√†o." << endl;
    } else {
        cout << "S·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i:" << endl;
        int i = 1;
        for (const auto& phone : phones) {
            cout << i++ << ". " << phone << endl;
        }
    }
    
    cout << "\n=== T√ôY CH·ªåN ===" << endl;
    cout << "1. Th√™m s·ªë ƒëi·ªán tho·∫°i m·ªõi" << endl;
    cout << "2. X√≥a s·ªë ƒëi·ªán tho·∫°i" << endl;
    cout << "3. Quay l·∫°i" << endl;
    
    int choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
    
    switch (choice) {
        case 1:
            addPhoneToContact(contact);
            break;
        case 2:
            if (!phones.empty()) {
                deletePhoneNumber(contact);
            } else {
                cout << "‚ùå Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ x√≥a!" << endl;
            }
            break;
        case 3:
            return;
        default:
            cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
    }
}

void ContactUI::manageEmails(Contact* contact) const {
    cout << "\n=== QU·∫¢N L√ù EMAIL ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    auto emails = contact->getEmails();
    if (emails.empty()) {
        cout << "üì≠ Ch∆∞a c√≥ email n√†o." << endl;
    } else {
        cout << "Email hi·ªán t·∫°i:" << endl;
        int i = 1;
        for (const auto& email : emails) {
            cout << i++ << ". " << email << endl;
        }
    }
    
    cout << "\n=== T√ôY CH·ªåN ===" << endl;
    cout << "1. Th√™m email m·ªõi" << endl;
    cout << "2. X√≥a email" << endl;
    cout << "3. Quay l·∫°i" << endl;
    
    int choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
    
    switch (choice) {
        case 1:
            addEmailToContact(contact);
            break;
        case 2:
            if (!emails.empty()) {
                deleteEmail(contact);
            } else {
                cout << "‚ùå Kh√¥ng c√≥ email ƒë·ªÉ x√≥a!" << endl;
            }
            break;
        case 3:
            return;
        default:
            cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
    }
}

void ContactUI::deletePhoneNumber(Contact* contact) const {
    cout << "\n=== X√ìA S·ªê ƒêI·ªÜN THO·∫†I ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    auto phones = contact->getPhoneNumbers();
    cout << "Danh s√°ch s·ªë ƒëi·ªán tho·∫°i:" << endl;
    int i = 1;
    for (const auto& phone : phones) {
        cout << i++ << ". " << phone << endl;
    }
    
    int choice = getIntInput("Ch·ªçn s·ªë th·ª© t·ª± ƒë·ªÉ x√≥a (0 ƒë·ªÉ h·ªßy): ");
    if (choice == 0) {
        cout << "‚ÑπÔ∏è ƒê√£ h·ªßy thao t√°c." << endl;
        return;
    }
    
    if (choice < 1 || choice > phones.size()) {
        cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
        return;
    }
    
    auto it = phones.begin();
    advance(it, choice - 1);
    string phoneToDelete = *it;
    
    contact->removePhoneNumber(phoneToDelete);
    cout << "‚úì ƒê√£ x√≥a s·ªë ƒëi·ªán tho·∫°i: " << phoneToDelete << endl;
}

void ContactUI::deleteEmail(Contact* contact) const {
    cout << "\n=== X√ìA EMAIL ===" << endl;
    cout << "Li√™n h·ªá: " << contact->getName() << endl;
    
    auto emails = contact->getEmails();
    cout << "Danh s√°ch email:" << endl;
    int i = 1;
    for (const auto& email : emails) {
        cout << i++ << ". " << email << endl;
    }
    
    int choice = getIntInput("Ch·ªçn s·ªë th·ª© t·ª± ƒë·ªÉ x√≥a (0 ƒë·ªÉ h·ªßy): ");
    if (choice == 0) {
        cout << "‚ÑπÔ∏è ƒê√£ h·ªßy thao t√°c." << endl;
        return;
    }
    
    if (choice < 1 || choice > emails.size()) {
        cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
        return;
    }
    
    auto it = emails.begin();
    advance(it, choice - 1);
    string emailToDelete = *it;
    
    contact->removeEmail(emailToDelete);
    cout << "‚úì ƒê√£ x√≥a email: " << emailToDelete << endl;
}

void ContactUI::searchContacts() const {
    showSearchMenu();
    int choice = getIntInput("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ");
    
    switch (choice) {
        case 1:
            searchByName();
            break;
        case 2:
            searchByPhone();
            break;
        case 3:
            searchByEmail();
            break;
        case 4:
            return;
        default:
            cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" << endl;
    }
}

void ContactUI::searchByName() const {
    cout << "\n=== T√åM KI·∫æM THEO T√äN ===" << endl;
    string name = getStringInput("Nh·∫≠p t√™n c·∫ßn t√¨m: ");
    
    set<Contact*> results = manager->searchByName(name);
    displaySearchResults(results);
}

void ContactUI::searchByPhone() const {
    cout << "\n=== T√åM KI·∫æM THEO S·ªê ƒêI·ªÜN THO·∫†I ===" << endl;
    string phone = getStringInput("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·∫ßn t√¨m: ");
    
    set<Contact*> results = manager->searchByPhone(phone);
    displaySearchResults(results);
}

void ContactUI::searchByEmail() const {
    cout << "\n=== T√åM KI·∫æM THEO EMAIL ===" << endl;
    string email = getStringInput("Nh·∫≠p email c·∫ßn t√¨m: ");
    
    set<Contact*> results = manager->searchByEmail(email);
    displaySearchResults(results);
}

void ContactUI::displayAllContacts() const {
    manager->displayAllContacts();
}

void ContactUI::displaySearchResults(const set<Contact*>& results) const {
    if (results.empty()) {
        cout << "üîç Kh√¥ng t√¨m th·∫•y li√™n h·ªá n√†o!" << endl;
        return;
    }
    
    cout << "\n=== K·∫æT QU·∫¢ T√åM KI·∫æM (" << results.size() << " k·∫øt qu·∫£) ===" << endl;
    for (Contact* contact : results) {
        contact->display();
    }
}

string ContactUI::getStringInput(const string& prompt) const {
    string input;
    cout << prompt;
    getline(cin, input);
    return input;
}

int ContactUI::getIntInput(const string& prompt) const {
    int value;
    cout << prompt;
    cin >> value;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    return value;
}

void ContactUI::clearScreen() const {
    #ifdef _WIN32
        (void)system("cls");
    #else
        (void)system("clear");
    #endif
}

void ContactUI::pause() const {
    cout << "\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

bool ContactUI::isValidPhoneNumber(const string& phone) const {
    // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
    string cleanPhone = phone;
    cleanPhone.erase(remove_if(cleanPhone.begin(), cleanPhone.end(), 
                              [](char c) { return !isdigit(c); }), cleanPhone.end());
    
    // Ki·ªÉm tra ƒë·ªô d√†i (10-15 s·ªë)
    if (cleanPhone.length() < 10 || cleanPhone.length() > 15) {
        return false;
    }
    
    // Ki·ªÉm tra t·∫•t c·∫£ l√† s·ªë
    return all_of(cleanPhone.begin(), cleanPhone.end(), ::isdigit);
}

bool ContactUI::isValidEmail(const string& email) const {
    // Ki·ªÉm tra c∆° b·∫£n email format
    if (email.empty() || email.length() < 5) {
        return false;
    }
    
    // Ki·ªÉm tra c√≥ @ v√† .
    size_t atPos = email.find('@');
    size_t dotPos = email.find('.', atPos);
    
    if (atPos == string::npos || dotPos == string::npos) {
        return false;
    }
    
    // Ki·ªÉm tra @ kh√¥ng ·ªü ƒë·∫ßu ho·∫∑c cu·ªëi
    if (atPos == 0 || atPos == email.length() - 1) {
        return false;
    }
    
    // Ki·ªÉm tra . kh√¥ng ·ªü cu·ªëi
    if (dotPos == email.length() - 1) {
        return false;
    }
    
    // Ki·ªÉm tra c√≥ k√Ω t·ª± tr∆∞·ªõc @
    if (atPos < 1) {
        return false;
    }
    
    // Ki·ªÉm tra c√≥ k√Ω t·ª± sau .
    if (dotPos >= email.length() - 1) {
        return false;
    }
    
    return true;
}
